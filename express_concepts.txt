Express web framework (Node.JS Web Framework) (server-side website programming)
*********************

Handles Node.JS requests and it builds up our server !

Node based Web applications.

The Node.JS runtime is intended for use outside of a browser context.

As such, the environment omits browser-specific JavaScript APIs
and adds support for more traditional OS APIs including HTTP and file system libraries.

Common web-development tasks are not directly supported by Node itself. 

In a traditional data-driven website, 
a web server application waits for HTTP requests from the web browser (or other client).
When a request is received the application works out what action is needed 
based on the URL pattern and possibly associated information contained in POST data or GET data. Depending on what is required it may then read or write information from a database
or perform other tasks required to satisfy the request. 
The application will then return a response to the web browser, 
often dynamically creating an HTML page for the browser to display by inserting 
the retrieved data into placeholders in an HTML template.

Express is unopinionated. 
You can insert almost any compatible middleware 
you like into the request handling chain, in almost any order you like. 
You can structure the app in one file or multiple files, and using any directory structure.

Express provides methods to specify what function is called 
for a particular HTTP verb (GET, POST, SET, etc.) and URL pattern ("Route"), 
and methods to specify what template ("view") engine is used, 
where template files are located, and what template to use to render a response. 

You can use Express middleware to add support for cookies, sessions, and users, getting POST/GET parameters, etc. 

You can use any database mechanism supported by Node 
(Express does not define any database-related behaviour).

Following are some of the core features of Express framework:
- Allows to set up middlewares to respond to HTTP Requests.
- Defines a routing table which is used to perform different actions based on HTTP Method and URL.
- Allows to dynamically render HTML Pages based on passing arguments to templates.

Prerequisites:	
Basic computer literacy. 
A general understanding of server-side website programming, 
and in particular the mechanics of client-server interactions in websites.

Objective:	
To gain familiarity with what Express is and how it fits in with Node, 
what functionality it provides, and the main building blocks of an Express application.

**********************************************************************
You should install the following important modules along with express:

body-parser − This is a node.js middleware for handling JSON, Raw, Text and URL encoded form data.
cookie-parser − Parse Cookie header and populate req.cookies with an object keyed by the cookie names.
multer − This is a node.js middleware for handling multipart/form-data.

$ npm install body-parser --save
$ npm install cookie-parser --save
$ npm install multer --save
**********************************************************************

Serving Static Files

Express provides a built-in middleware express.static 
                                       --------------

to serve static files, such as images, CSS, JavaScript, etc.

You simply need to pass the name of the directory where you keep your static assets, 
to the express.static middleware to start serving the files directly. 
For example, if you keep your images, CSS, and JavaScript files in a directory named public, 
you can do this:

app.use( express.static('public') );

**********************************************************************

Create our own API


